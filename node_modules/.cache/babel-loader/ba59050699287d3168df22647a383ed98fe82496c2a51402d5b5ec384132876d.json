{"ast":null,"code":"import { FILTER_GENRE, STORY_ARCHIVE, SEARCH_BOOK, REVIEW_BOOK } from '../constants/actionTypes';\n\n// const fs = require('fs')\n\nconst INITIAL_STATE = [];\n\n// const initBooks = () => {\n//   let raw = fs.readFileSync('../data/books.json');\n// let itemList = JSON.parse(raw);\n\n// }\n\nconst applyArchiveStory = (state, action) => {\n  console.log(action);\n  //use this code for when implementing with actual API, filter code is right\n  // newDataFilter = api.fetch(\"xxxx?q=${book.objectID}\")\n  // return newDateFilter;\n  return state.filter(book => {\n    return action.id != book.objectID;\n  });\n};\nconst applyFilterStory = (state, action) => {\n  console.log(action);\n  return state.filter(book => {\n    return action.genre == book.genre;\n  });\n};\nconst applySearchStory = (state, action) => {\n  console.log(action);\n  /* toLowerCase() make it possible for lower case search */\n  /* includes() make it possible for search with fewer words */\n  return state.filter(book => {\n    return book.title.toLowerCase().includes(action.title.toLowerCase());\n  });\n};\nconst applyReviewStory = (state, action) => {\n  console.log(action);\n  return state.filter(book => {\n    return action.id === book.objectID;\n  });\n};\nfunction storyReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case STORY_ARCHIVE:\n      {\n        return applyArchiveStory(state, action);\n      }\n    case FILTER_GENRE:\n      {\n        return applyFilterStory(state, action);\n      }\n    case SEARCH_BOOK:\n      {\n        return applySearchStory(state, action);\n      }\n    case REVIEW_BOOK:\n      {\n        return applyReviewStory(state, action);\n      }\n    default:\n      return state;\n  }\n}\nexport default storyReducer;","map":{"version":3,"names":["FILTER_GENRE","STORY_ARCHIVE","SEARCH_BOOK","REVIEW_BOOK","INITIAL_STATE","applyArchiveStory","state","action","console","log","filter","book","id","objectID","applyFilterStory","genre","applySearchStory","title","toLowerCase","includes","applyReviewStory","storyReducer","type"],"sources":["/home/maximilian/Desktop/Mini-Project-P2/src/reducers/story.js"],"sourcesContent":["import { FILTER_GENRE, STORY_ARCHIVE, SEARCH_BOOK, REVIEW_BOOK } from '../constants/actionTypes';\n\n// const fs = require('fs')\n\nconst INITIAL_STATE = [];\n\n// const initBooks = () => {\n//   let raw = fs.readFileSync('../data/books.json');\n// let itemList = JSON.parse(raw);\n\n// }\n\nconst applyArchiveStory = (state, action) => { \n  console.log(action)\n  //use this code for when implementing with actual API, filter code is right\n  // newDataFilter = api.fetch(\"xxxx?q=${book.objectID}\")\n  // return newDateFilter;\n  return state.filter((book) => {return action.id != book.objectID})\n}\n\nconst applyFilterStory = (state, action) => { \n  console.log(action)\n  return state.filter((book) => {return action.genre == book.genre})\n}\n\nconst applySearchStory = (state, action) => { \n  console.log(action)\n  /* toLowerCase() make it possible for lower case search */\n  /* includes() make it possible for search with fewer words */\n  return state.filter((book) => {return book.title.toLowerCase().includes(action.title.toLowerCase())})\n}\n\nconst applyReviewStory = (state, action) => {\n  console.log(action)\n  return state.filter((book) => {return action.id === book.objectID})\n}\n  \nfunction storyReducer(state = INITIAL_STATE, action) {\n    switch(action.type) {\n\n      case STORY_ARCHIVE: {\n        return applyArchiveStory(state, action);\n      }\n      case FILTER_GENRE: {\n        return applyFilterStory(state, action);\n      }\n      case SEARCH_BOOK: {\n        return applySearchStory(state, action);\n      }\n      case REVIEW_BOOK: {\n        return applyReviewStory(state, action);\n      }\n      default : return state;\n    }\n  }\n  \n  export default storyReducer;"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,EAAEC,WAAW,EAAEC,WAAW,QAAQ,0BAA0B;;AAEhG;;AAEA,MAAMC,aAAa,GAAG,EAAE;;AAExB;AACA;AACA;;AAEA;;AAEA,MAAMC,iBAAiB,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC3CC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EACnB;EACA;EACA;EACA,OAAOD,KAAK,CAACI,MAAM,CAAEC,IAAI,IAAK;IAAC,OAAOJ,MAAM,CAACK,EAAE,IAAID,IAAI,CAACE,QAAQ;EAAA,CAAC,CAAC;AACpE,CAAC;AAED,MAAMC,gBAAgB,GAAGA,CAACR,KAAK,EAAEC,MAAM,KAAK;EAC1CC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EACnB,OAAOD,KAAK,CAACI,MAAM,CAAEC,IAAI,IAAK;IAAC,OAAOJ,MAAM,CAACQ,KAAK,IAAIJ,IAAI,CAACI,KAAK;EAAA,CAAC,CAAC;AACpE,CAAC;AAED,MAAMC,gBAAgB,GAAGA,CAACV,KAAK,EAAEC,MAAM,KAAK;EAC1CC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EACnB;EACA;EACA,OAAOD,KAAK,CAACI,MAAM,CAAEC,IAAI,IAAK;IAAC,OAAOA,IAAI,CAACM,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACZ,MAAM,CAACU,KAAK,CAACC,WAAW,CAAC,CAAC,CAAC;EAAA,CAAC,CAAC;AACvG,CAAC;AAED,MAAME,gBAAgB,GAAGA,CAACd,KAAK,EAAEC,MAAM,KAAK;EAC1CC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EACnB,OAAOD,KAAK,CAACI,MAAM,CAAEC,IAAI,IAAK;IAAC,OAAOJ,MAAM,CAACK,EAAE,KAAKD,IAAI,CAACE,QAAQ;EAAA,CAAC,CAAC;AACrE,CAAC;AAED,SAASQ,YAAYA,CAACf,KAAK,GAAGF,aAAa,EAAEG,MAAM,EAAE;EACjD,QAAOA,MAAM,CAACe,IAAI;IAEhB,KAAKrB,aAAa;MAAE;QAClB,OAAOI,iBAAiB,CAACC,KAAK,EAAEC,MAAM,CAAC;MACzC;IACA,KAAKP,YAAY;MAAE;QACjB,OAAOc,gBAAgB,CAACR,KAAK,EAAEC,MAAM,CAAC;MACxC;IACA,KAAKL,WAAW;MAAE;QAChB,OAAOc,gBAAgB,CAACV,KAAK,EAAEC,MAAM,CAAC;MACxC;IACA,KAAKJ,WAAW;MAAE;QAChB,OAAOiB,gBAAgB,CAACd,KAAK,EAAEC,MAAM,CAAC;MACxC;IACA;MAAU,OAAOD,KAAK;EACxB;AACF;AAEA,eAAee,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}